name: Update

on:
  schedule:
    - cron: '20 8,1 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出当前仓库（用于后续保存结果）
      - name: Checkout current repository
        uses: actions/checkout@v4
      
      # 2. 设置Python环境
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
    
      # 3. 安装依赖（假设requirements.txt在当前仓库）
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "crawler/requirements.txt" ]; then
            pip install -r crawler/requirements.txt
          else
            echo "Warning: requirements.txt not found, skipping install"
          fi

      # 4. 在工作目录内创建临时目录
      - name: Create workspace
        run: |
          mkdir -p ${{ github.workspace }}/temp_crawler
          echo "Created workspace directory"

      # 5. 下载目标仓库的爬虫文件
      - name: Download crawler scripts
        uses: actions/checkout@v4
        with:
          repository: wxbtt/wz
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          path: ${{ github.workspace }}/temp_crawler/source
          sparse-checkout: |
            crawler/config.py
            crawler/main.py
          clean: true

      # 6. 执行爬虫
      - name: Execute crawler
        run: |
          cd ${{ github.workspace }}/temp_crawler/source/crawler
          echo "Current directory: $(pwd)"
          ls -l
          
          # 安装临时依赖（如果需要）
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # 运行爬虫（结果直接生成到当前仓库根目录）
          python main.py --output-dir $GITHUB_WORKSPACE
          
          echo "Generated files in repo root:"
          ls -l $GITHUB_WORKSPACE

      # 7. 提交爬取结果
      - name: Commit results
        run: |
          cd $GITHUB_WORKSPACE
          git config --local user.email "actions@github.com"
          git config --local user.name "Automatic Updater"
          
          # 只添加非Python文件
          find . -type f -not -name '*.py' -not -path './.git/*' -exec git add {} +
          
          git status
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Data update: $(date +'%Y-%m-%d %H:%M:%S')"
            git push
          else
            echo "No changes to commit"
          fi

      # 8. 清理临时文件
      - name: Cleanup
        if: always()
        run: |
          echo "Performing cleanup..."
          rm -rf ${{ github.workspace }}/temp_crawler
          echo "Checking for leftover files:"
          find $GITHUB_WORKSPACE -name '*.py' -not -path './.git/*' | grep -v requirements.txt || echo "No leftover files found"